{"./":{"url":"./","title":"Introduction","keywords":"","body":""},"sections/Visual Studio Code 配置.html":{"url":"sections/Visual Studio Code 配置.html","title":"Visual Studio Code 配置","keywords":"","body":"安装环境 brew cask install visual-studio-code-insiders brew install php composer composer global require composer global require phpunit/phpunit composer global require squizlabs/php_codesniffer composer global require friendsofphp/php-cs-fixer Visual Studio Code 插件 php 开发推荐使用下面这些插件 PHP Intelephense PHPUnit php cs fixer PHP DocBlocker phpcs 插件配置 \"php.suggest.basic\": false, \"php-cs-fixer.onsave\": true, \"php-cs-fixer.rules\": \"@PSR2\", \"phpcs.enable\": true, \"phpcs.standard\": \"PSR2\", \"phpcs.showSources\": true, \"phpcs.trace.server\": \"verbose\", \"phpcs.ignorePatterns\": [\"*/vendor/*\"], \"phpcs.autoConfigSearch\": true, \"intelephense.licenceKey\": \"\", \"[php]\": { \"editor.defaultFormatter\": \"junstyle.php-cs-fixer\" }, 我使用的 intelephense 插件推出了 Pro 服务，推荐购买，https://intelephense.com/ 其他 你可以会奇怪我怎么没安装 xdebug 插件，理由很简单，因为每次打断点跑但单元测试的时候，总是会报 PHP ReflectionException: Method suite does not exist，上网查了解决方法，按照说的将 xdebug.show_exception_trace 设置为0，也依旧无法解决，所以干脆不用 xdebug 了，反正调试这块打 var_dump 也是能解决的，没必要非要使用 xdebug 还有就是为什么没使用 phpstan，phpmd 这类的静态检查工具，主要是毕竟 php 不是静态类型语言，而这类检查工具总是会提示各种各样的错误，太烦人了。只要好好遵守 PSR 规范，还是能写出安全的代码的，所以干脆不用了，看到错误就糟心 "},"sections/项目初始化.html":{"url":"sections/项目初始化.html","title":"项目初始化","keywords":"","body":"项目初始化这块不单单讲安装 laravel，还会讲下 tymon/jwt-auth，barryvdh/laravel-ide-helper，barryvdh/laravel-cors，mews/purifier 这些在项目开发很常用的包的配置 安装项目 composer create-project laravel/laravel laravel-test-driver-development 配置 phpcs.xml composer require --dev squizlabs/php_codesniffer 在项目根目录新建 phpcs.xml app config routes tests */_ide_helper.php vendor/* database/* 这是我使用的配置 配置 ide-helper composer require --dev barryvdh/laravel-ide-helper composer require --dev doctrine/dbal 在 AppServiceProvider.php 中加入这行 public function register() { if ($this->app->environment() !== 'production') { $this->app->register(\\Barryvdh\\LaravelIdeHelper\\IdeHelperServiceProvider::class); } // ... } 同时在 composer.json 中声明不对 ide-helper 包自动发现 生成配置文件 php artisan vendor:publish --provider=\"Barryvdh\\LaravelIdeHelper\\IdeHelperServiceProvider\" --tag=config 这是我使用的配置 return array( /* |-------------------------------------------------------------------------- | Filename & Format |-------------------------------------------------------------------------- | | The default filename (without extension) and the format (php or json) | */ 'filename' => '_ide_helper', 'format' => 'php', 'meta_filename' => '.phpstorm.meta.php', /* |-------------------------------------------------------------------------- | Fluent helpers |-------------------------------------------------------------------------- | | Set to true to generate commonly used Fluent methods | */ 'include_fluent' => true, /* |-------------------------------------------------------------------------- | Write Model Magic methods |-------------------------------------------------------------------------- | | Set to false to disable write magic methods of model | */ 'write_model_magic_where' => true, /* |-------------------------------------------------------------------------- | Write Eloquent Model Mixins |-------------------------------------------------------------------------- | | This will add the necessary DocBlock mixins to the model class | contained in the Laravel Framework. This helps the IDE with | auto-completion. | | Please be aware that this setting changes a file within the /vendor directory. | */ 'write_eloquent_model_mixins' => false, /* |-------------------------------------------------------------------------- | Helper files to include |-------------------------------------------------------------------------- | | Include helper files. By default not included, but can be toggled with the | -- helpers (-H) option. Extra helper files can be included. | */ 'include_helpers' => true, 'helper_files' => array( base_path() . '/vendor/laravel/framework/src/Illuminate/Support/helpers.php', ), /* |-------------------------------------------------------------------------- | Model locations to include |-------------------------------------------------------------------------- | | Define in which directories the ide-helper:models command should look | for models. | */ 'model_locations' => array( 'app', ), /* |-------------------------------------------------------------------------- | Extra classes |-------------------------------------------------------------------------- | | These implementations are not really extended, but called with magic functions | */ 'extra' => array( 'Eloquent' => array('Illuminate\\Database\\Eloquent\\Builder', 'Illuminate\\Database\\Query\\Builder'), 'Session' => array('Illuminate\\Session\\Store'), ), 'magic' => array( 'Log' => array( 'debug' => 'Monolog\\Logger::addDebug', 'info' => 'Monolog\\Logger::addInfo', 'notice' => 'Monolog\\Logger::addNotice', 'warning' => 'Monolog\\Logger::addWarning', 'error' => 'Monolog\\Logger::addError', 'critical' => 'Monolog\\Logger::addCritical', 'alert' => 'Monolog\\Logger::addAlert', 'emergency' => 'Monolog\\Logger::addEmergency', ) ), /* |-------------------------------------------------------------------------- | Interface implementations |-------------------------------------------------------------------------- | | These interfaces will be replaced with the implementing class. Some interfaces | are detected by the helpers, others can be listed below. | */ 'interfaces' => array(), /* |-------------------------------------------------------------------------- | Support for custom DB types |-------------------------------------------------------------------------- | | This setting allow you to map any custom database type (that you may have | created using CREATE TYPE statement or imported using database plugin | / extension to a Doctrine type. | | Each key in this array is a name of the Doctrine2 DBAL Platform. Currently valid names are: | 'postgresql', 'db2', 'drizzle', 'mysql', 'oracle', 'sqlanywhere', 'sqlite', 'mssql' | | This name is returned by getName() method of the specific Doctrine/DBAL/Platforms/AbstractPlatform descendant | | The value of the array is an array of type mappings. Key is the name of the custom type, | (for example, \"jsonb\" from Postgres 9.4) and the value is the name of the corresponding Doctrine2 type (in | our case it is 'json_array'. Doctrine types are listed here: | http://doctrine-dbal.readthedocs.org/en/latest/reference/types.html | | So to support jsonb in your models when working with Postgres, just add the following entry to the array below: | | \"postgresql\" => array( | \"jsonb\" => \"json_array\", | ), | */ 'custom_db_types' => array(), /* |-------------------------------------------------------------------------- | Support for camel cased models |-------------------------------------------------------------------------- | | There are some Laravel packages (such as Eloquence) that allow for accessing | Eloquent model properties via camel case, instead of snake case. | | Enabling this option will support these packages by saving all model | properties as camel case, instead of snake case. | | For example, normally you would see this: | | * @property \\Illuminate\\Support\\Carbon $created_at | * @property \\Illuminate\\Support\\Carbon $updated_at | | With this enabled, the properties will be this: | | * @property \\Illuminate\\Support\\Carbon $createdAt | * @property \\Illuminate\\Support\\Carbon $updatedAt | | Note, it is currently an all-or-nothing option. | */ 'model_camel_case_properties' => true, /* |-------------------------------------------------------------------------- | Property Casts |-------------------------------------------------------------------------- | | Cast the given \"real type\" to the given \"type\". | */ 'type_overrides' => array( 'integer' => 'int', 'boolean' => 'bool', ), /* |-------------------------------------------------------------------------- | Include DocBlocks from classes |-------------------------------------------------------------------------- | | Include DocBlocks from classes to allow additional code inspection for | magic methods and properties. | */ 'include_class_docblocks' => true, ); 为了保证每次有包安装都会自动更新 _ide_helper.php，所以在 composer.json 中加入 \"scripts\": { \"post-update-cmd\": [ \"Illuminate\\\\Foundation\\\\ComposerScripts::postUpdate\", \"php artisan ide-helper:generate\", \"php artisan ide-helper:meta\" ] } 同时将编辑 .gitignore _ide_helper.php .phpstorm.meta.php 让生成的两个文件不会加入到版本库中 cors 配置 composer require barryvdh/laravel-cors 添加 middleware，编辑 app/Http/Kernel.php protected $middleware = [ // ... \\Barryvdh\\Cors\\HandleCors::class, ]; 添加配置文件 php artisan vendor:publish --provider=\"Barryvdh\\Cors\\ServiceProvider\" 这是我的配置 true, 'allowedOrigins' => [], 'allowedOriginsPatterns' => [ '/localhost(:\\d+)?/', ], 'allowedHeaders' => ['*'], 'allowedMethods' => ['*'], 'exposedHeaders' => [ 'Authorization' ], 'maxAge' => 0, ]; allowedOriginsPatterns 是配置 host 符合正则规则的会自动在响应头中加入 cors 头 exposedHeaders 中加入 Authorization 主要原因为 jwt-auth 这个包加的，后面会说 purifier 配置 composer require mews/purifier purifier 这个包主要是用于防富文本的 xss 攻击 添加配置文件 php artisan vendor:publish --provider=\"Mews\\Purifier\\PurifierServiceProvider\" 这是我的配置文件 set('Core.Encoding', $this->config->get('purifier.encoding')); * $config->set('Cache.SerializerPath', $this->config->get('purifier.cachePath')); * if ( ! $this->config->get('purifier.finalize')) { * $config->autoFinalize = false; * } * $config->loadArray($this->getConfig()); * * You must NOT delete the default settings * anything in settings should be compacted with params that needed to instance HTMLPurifier_Config. * * @link http://htmlpurifier.org/live/configdoc/plain.html */ return [ 'encoding' => 'UTF-8', 'finalize' => true, 'cachePath' => storage_path('app/purifier'), 'cacheFileMode' => 0755, 'settings' => [ 'default' => [ 'HTML.Doctype' => 'HTML 4.01 Transitional', 'HTML.Allowed' => '*[class|style|target],div,b,strong,i,em,u,a[href|title],ul,ol,li,p[style],br,span[style],img[width|height|alt|src],pre,blockquote', 'CSS.AllowedProperties' => 'font,font-size,font-weight,font-style,font-family,text-decoration,padding-left,color,background-color,text-align', 'AutoFormat.AutoParagraph' => true, 'AutoFormat.RemoveEmpty' => true, ], 'test' => [ 'Attr.EnableID' => 'true', ], \"youtube\" => [ \"HTML.SafeIframe\" => 'true', \"URI.SafeIframeRegexp\" => \"%^(http://|https://|//)(www.youtube.com/embed/|player.vimeo.com/video/)%\", ], 'custom_definition' => [ 'id' => 'html5-definitions', 'rev' => 1, 'debug' => false, 'elements' => [ // http://developers.whatwg.org/sections.html ['section', 'Block', 'Flow', 'Common'], ['nav', 'Block', 'Flow', 'Common'], ['article', 'Block', 'Flow', 'Common'], ['aside', 'Block', 'Flow', 'Common'], ['header', 'Block', 'Flow', 'Common'], ['footer', 'Block', 'Flow', 'Common'], // Content model actually excludes several tags, not modelled here ['address', 'Block', 'Flow', 'Common'], ['hgroup', 'Block', 'Required: h1 | h2 | h3 | h4 | h5 | h6', 'Common'], // http://developers.whatwg.org/grouping-content.html ['figure', 'Block', 'Optional: (figcaption, Flow) | (Flow, figcaption) | Flow', 'Common'], ['figcaption', 'Inline', 'Flow', 'Common'], // http://developers.whatwg.org/the-video-element.html#the-video-element ['video', 'Block', 'Optional: (source, Flow) | (Flow, source) | Flow', 'Common', [ 'src' => 'URI', 'type' => 'Text', 'width' => 'Length', 'height' => 'Length', 'poster' => 'URI', 'preload' => 'Enum#auto,metadata,none', 'controls' => 'Bool', ]], ['source', 'Block', 'Flow', 'Common', [ 'src' => 'URI', 'type' => 'Text', ]], // http://developers.whatwg.org/text-level-semantics.html ['s', 'Inline', 'Inline', 'Common'], ['var', 'Inline', 'Inline', 'Common'], ['sub', 'Inline', 'Inline', 'Common'], ['sup', 'Inline', 'Inline', 'Common'], ['mark', 'Inline', 'Inline', 'Common'], ['wbr', 'Inline', 'Empty', 'Core'], // http://developers.whatwg.org/edits.html ['ins', 'Block', 'Flow', 'Common', ['cite' => 'URI', 'datetime' => 'CDATA']], ['del', 'Block', 'Flow', 'Common', ['cite' => 'URI', 'datetime' => 'CDATA']], ], 'attributes' => [ ['iframe', 'allowfullscreen', 'Bool'], ['table', 'height', 'Text'], ['td', 'border', 'Text'], ['th', 'border', 'Text'], ['tr', 'width', 'Text'], ['tr', 'height', 'Text'], ['tr', 'border', 'Text'], ], ], 'custom_attributes' => [ ['a', 'target', 'Enum#_blank,_self,_target,_top'], ], 'custom_elements' => [ ['u', 'Inline', 'Inline', 'Common'], ], ], ]; jwt-auth 配置 composer require tymon/jwt-auth \"1.*@rc\" 添加配置文件 php artisan vendor:publish --provider=\"Tymon\\JWTAuth\\Providers\\LaravelServiceProvider\" "},"sections/Restful 规范.html":{"url":"sections/Restful 规范.html","title":"Restful 规范","keywords":"","body":"下面是我写 restful 接口所遵循的规范，你可以拿来借鉴下，也可以借鉴下 Github 的 REST API 规范 获取单条数据 // status code: 200 { \"id\": 1, \"name\": \"helbing\" } 获取列表数据 // status code: 200 [ { \"id\": 1, \"name\": \"helbing\" }, { \"id\": 2, \"name\": \"tom\" } ] 获取分页数据 // status code: 200 { \"data\": [ { \"id\": 1, \"name\": \"helbing\" }, { \"id\": 2, \"name\": \"tom\" } ], \"pagination\": { \"current_page\": 1, \"last_page\": 1, \"next_url\": null, \"previous_url\": null, \"per_page\": 10, \"total:: 2 } } 分页数据这块有两个特殊参数字段 page: 用于页数 per_page: 用于每页数量 /api?page=2&per_page=20 创建数据 // status code: 201 { \"id\": 1, \"name\": \"helbing\" } 更新数据 // status code: 200 { \"id\": 1, \"name\": \"helbing\" } 删除数据 // status code: 204 表单验证失败 // status code: 422 { \"sort_by\": [ \"排序字段非法\" ], \"keyword\": [ \"查询字段过长\", \"查询字段非法\" ] } 其他 // status code: 400 // status code: 401 // status code: 500 { \"message\": \"\" } "}}